'use client';
import AddCourse from '../AddCourse';
import { AgGridReact } from "ag-grid-react";
import { useEffect, useState, useRef } from "react";
import { AllCommunityModule, ModuleRegistry } from 'ag-grid-community';
// import "ag-grid-community/styles/ag-grid.css";
// import "ag-grid-community/styles/ag-theme-alpine.css";
// import '@ag-grid-community/styles/ag-grid.css';
// import '@ag-grid-community/styles/ag-theme-quartz.css';

// Register AG Grid Modules
ModuleRegistry.registerModules([AllCommunityModule]);

interface Course {

  sr: number;                     // Unique course ID (Primary Key)
  course_code: string;            // Unique course code
  course_name: string;            // Course name
  credit: number;                 // Credit hours (e.g., 3.0, 4.5)
  department: string;             // Department offering the course
  semester: number;               // Semester number (1-8)
  course_category: string;        // Course category (Core, Elective, etc.)
  description: string;            // Detailed course description
  teacher_name: string;           // Instructor's name
  teacher_email: string;          // Instructor's email (unique)
  annotation?: string;            // Optional remarks or notes (Nullable)
  course_start_date: string;      // Start date (Stored as a string in ISO format "YYYY-MM-DD")
  course_image?: string;          // Optional image URL (Nullable)
  created_at?: string;            // Timestamp (Nullable, auto-generated by DB)

}


export default function Courses() {

    // creatin two datasets for alloted and suggested courses
    const [suggestedCourses, setSuggestedCourses] = useState<Course[]>([]);
    const [allottedCourses, setAllottedCourses] = useState<Course[]>([]);
    
    const [loading, setLoading] = useState(true); //  stores data that can change over time (due to user interaction, API calls, etc.) and causes the component to re-render when updated.


    // now creating grid references for both datasets
    const gridRefAllotted = useRef<AgGridReact>(null); // help to access the grid API and properties directly from the component
    // gridRefAllotted is a reference to the AgGridReact component for the allotted courses grid.
    // It allows you to programmatically interact with the grid, such as refreshing data or changing grid properties.
    const gridRefSuggested = useRef<AgGridReact>(null);

        // Fetching courses from the API when the component mounts
    useEffect(() => {  //runs when the component mounts and when the dependencies change. In this case, it runs only once when the component mounts because the dependency array is empty.

        const fetchCourses = async () => 
        {
            try {
                const response = await fetch("/api/courses/get-dashboardADMIN"); // New API endpoint
                if (!response.ok) throw new Error("Failed to fetch courses");
    
                const data = await response.json(); // Fetching data from the API
    
                setAllottedCourses(data.approvedCourses || []);   // Set the allotted courses from the API response initially as an empty array whose interface is already created
                setSuggestedCourses(data.pendingCourses || []);
            } catch (error) {
                console.error("Error fetching courses:", error);
            } finally {
                setLoading(false);
            }
        };
     
        fetchCourses();
    }, []);
    

    const columnDefs = [
        { 
        field: "id", // give normal sr no
        headerName: "Sr.", 
        sortable: true, 
        filter: true,
        headerClass: "custom-header",
        cellClass: "course-name",
        minWidth: 80, // Ensures it doesn't get too small
        maxWidth: 80, // Ensures it doesn't get too big
        },
        { 
            field: "course_code", 
            headerName: "Code", 
            sortable: true, 
            filter: true,
            headerClass: "custom-header",
            minWidth: 120,
            maxWidth: 120,
        },
        { 
            field: "course_name", 
            headerName: "Course Name", 
            sortable: true, 
            filter: true,
            headerClass: "custom-header",
            minWidth: 200,
        },
        { 
            field: "semester", 
            headerName: "Sem", 
            sortable: true, 
            filter: true,
            headerClass: "custom-header",
            minWidth: 90,
            maxWidth: 90
            
        },
        {
            field: "teacher_name", 
            headerName: "Teacher Assigned", 
            sortable: true, 
            filter: true,
            headerClass: "custom-header",
            minWidth: 220
        },
        { 
            field: "description", 
            headerName: "Description",
            sortable: true, 
            filter: true ,
            editable: true,
            headerClass: "custom-header",
            minWidth: 180
        },
        {
            field:"course_category",
            headerName:"Category",
            sortable: true,
            filter: true,
            headerClass: "custom-header",
            minWidth: 140
        },
        {
            field:"credit",
            headerName:"Credit",
            sortable: true,
            filter: true,
            headerClass: "custom-header",
            minWidth: 130,
            maxWidth: 130
        },
        {
            field:"course_start_date",
            headerName:"Start Date",
            sortable: true,
            filter: true,
            headerClass: "custom-header",
            minWidth: 150
        },{
            field:"created_at",
            headerName:"Created On",
            sortable: true,
            filter: true,
            sort: "desc" as 'asc' | 'desc' | undefined,
            headerClass: "custom-header",
            minWidth: 150
        }
    ];

    if (loading) return <div>Loading courses...</div>;

    return (
        <>
        <span className="classic_heading">Courses</span> <AddCourse />

        <h4 className="classic_SUBheading" style={{marginTop:"0px", width:"auto"}}>Alloted Courses</h4>
        <div className="ag-theme-alpine" style={{ height: 350, width: "100%" }}>
            <AgGridReact

                    ref={gridRefAllotted}
                    rowData={allottedCourses}
                    columnDefs={columnDefs}
                    headerHeight={40}
                    pagination={true}
                    paginationPageSize={10}
                    // domLayout="autoHeight"
                    rowHeight={35} // Set row height to 50px

                    defaultColDef={{
                        flex: 1,
                        minWidth: 100,
                        resizable: true
                    }}
                    
            />
        </div>

        <h4  style={{width: "50%" }}className="classic_SUBheading">Suggested Courses</h4>
        <div className="ag-theme-alpine" style={{ height: 350, width: "100%" }}>
            <AgGridReact
                ref={gridRefSuggested}
                rowData={suggestedCourses}
                columnDefs={columnDefs}
                headerHeight={40}
                pagination={true}
                paginationPageSize={10}
                // domLayout="autoHeight"
                rowHeight={35} // Set row height to 50px
                defaultColDef={{
                    flex: 1,
                    minWidth: 100,
                    resizable: true
                }
                
                } />
        </div>

        </>
    );}

{/* ///////////////////////////////////////////////////////////////////////////////////////////////////////////// */}
